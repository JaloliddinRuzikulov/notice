<!DOCTYPE html>
<html lang="uz">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof t !== 'undefined' ? t('navigation.sip_phone') || 'SIP Telefon' : 'SIP Telefon' %> - <%= typeof t !== 'undefined' ? t('app.title') : 'Xabarnoma Tizimi' %></title>
    <link rel="stylesheet" href="/css/material-icons-local.css">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/sip-phone.css">
</head>
<body>
    <%- include('partials/navigation') %>

    <div class="container">
        <div class="sip-phone-container">
            <!-- SIP Account Selector -->
            <div class="sip-account-selector" style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 10px;">
                <label for="sipAccountSelect" style="font-weight: bold; margin-bottom: 10px; display: block;">
                    <i class="fas fa-phone-square"></i> SIP Account tanlang:
                </label>
                <select id="sipAccountSelect" class="form-control" onchange="changeSIPAccount()" style="padding: 10px; font-size: 16px;">
                    <option value="">SIP account tanlang...</option>
                </select>
            </div>
            
            <!-- Phone Header -->
            <div class="phone-header">
                <div class="phone-status">
                    <span class="status-indicator" id="statusIndicator"></span>
                    <span class="status-text" id="statusText">Ulanmagan</span>
                </div>
                <div class="phone-info">
                    <span id="extensionInfo">SIP account tanlanmagan</span>
                    <button onclick="testMicrophone()" style="margin-left: 10px; padding: 5px 10px; font-size: 12px;">
                        <i class="fas fa-microphone"></i> Test Mikrofon
                    </button>
                    <span id="micStatus" style="margin-left: 10px; display: none;">
                        <i class="fas fa-microphone-slash" style="color: red;"></i> 
                        <small>Mikrofon o'chiq</small>
                    </span>
                </div>
            </div>

            <!-- Phone Display -->
            <div class="phone-display">
                <input type="text" id="phoneNumber" class="phone-input" placeholder="Raqamni kiriting">
                <div class="call-info" id="callInfo" style="display: none;">
                    <div class="caller-name" id="callerName"></div>
                    <div class="call-timer" id="callTimer">00:00</div>
                </div>
            </div>

            <!-- Quick Dial -->
            <div class="quick-dial">
                <button class="quick-btn" onclick="quickDial('101')">
                    <i class="fas fa-exclamation-triangle"></i> 101
                </button>
                <button class="quick-btn" onclick="quickDial('102')">
                    <i class="fas fa-shield-alt"></i> 102
                </button>
                <button class="quick-btn" onclick="quickDial('103')">
                    <i class="fas fa-ambulance"></i> 103
                </button>
                <button class="quick-btn" onclick="quickDial('1050')">
                    <i class="fas fa-fire-extinguisher"></i> 1050
                </button>
            </div>

            <!-- Dialpad -->
            <div class="dialpad">
                <button class="dial-btn" onclick="appendNumber('1')">1</button>
                <button class="dial-btn" onclick="appendNumber('2')">2<span>ABC</span></button>
                <button class="dial-btn" onclick="appendNumber('3')">3<span>DEF</span></button>
                <button class="dial-btn" onclick="appendNumber('4')">4<span>GHI</span></button>
                <button class="dial-btn" onclick="appendNumber('5')">5<span>JKL</span></button>
                <button class="dial-btn" onclick="appendNumber('6')">6<span>MNO</span></button>
                <button class="dial-btn" onclick="appendNumber('7')">7<span>PQRS</span></button>
                <button class="dial-btn" onclick="appendNumber('8')">8<span>TUV</span></button>
                <button class="dial-btn" onclick="appendNumber('9')">9<span>WXYZ</span></button>
                <button class="dial-btn" onclick="appendNumber('*')">*</button>
                <button class="dial-btn" onclick="appendNumber('0')">0<span>+</span></button>
                <button class="dial-btn" onclick="appendNumber('#')">#</button>
            </div>

            <!-- Call Actions -->
            <div class="call-actions">
                <button class="action-btn call-btn" id="callBtn" onclick="makeCall()">
                    <i class="fas fa-phone"></i>
                </button>
                <button class="action-btn hangup-btn" id="hangupBtn" onclick="hangupCall()" style="display: none;">
                    <i class="fas fa-phone-slash"></i>
                </button>
                <button class="action-btn" id="muteBtn" onclick="toggleMute()" disabled>
                    <i class="fas fa-microphone"></i>
                </button>
                <button class="action-btn" id="holdBtn" onclick="toggleHold()" disabled>
                    <i class="fas fa-pause"></i>
                </button>
            </div>
            
            <!-- Test Call Button -->
            <div style="margin: 20px 0; text-align: center;">
                <button class="btn btn-warning" onclick="makeTestCall()" style="padding: 10px 20px;">
                    <i class="fas fa-phone-volume"></i> Test qo'ng'iroq (0990823112)
                </button>
            </div>
            
            <!-- Working SIP Client Test -->
            <div style="margin: 10px 0; padding: 15px; background: #d4edda; border-radius: 8px;">
                <h4>✅ Working SIP Client (2024 Solution)</h4>
                <button class="btn btn-success" onclick="initWorkingSIP()">
                    <i class="fas fa-power-off"></i> Initialize
                </button>
                <button class="btn btn-primary" onclick="testWorkingCall()" id="workingCallBtn" disabled>
                    <i class="fas fa-phone"></i> Make Call
                </button>
                <button class="btn btn-danger" onclick="hangupWorkingCall()" id="workingHangupBtn" disabled>
                    <i class="fas fa-phone-slash"></i> Hangup
                </button>
                <div id="workingSipStatus" style="margin-top: 10px; font-weight: bold;"></div>
            </div>
            
            <!-- Simple WebRTC Test -->
            <div style="margin: 10px 0; padding: 15px; background: #fff3cd; border-radius: 8px;">
                <h4>🎯 Oddiy WebRTC Test</h4>
                <button class="btn btn-primary" onclick="testSimpleWebRTC()">
                    <i class="fas fa-play"></i> WebRTC orqali qo'ng'iroq
                </button>
                <span id="simpleWebRTCStatus" style="margin-left: 15px; font-weight: bold;"></span>
            </div>

            <!-- DTMF Test -->
            <div class="dtmf-test">
                <h3>DTMF Test</h3>
                <div class="dtmf-buttons">
                    <button class="dtmf-btn" onclick="sendDTMF('1')">1 - Tasdiqlash</button>
                    <button class="dtmf-btn" onclick="sendDTMF('2')">2</button>
                    <button class="dtmf-btn" onclick="sendDTMF('3')">3</button>
                </div>
            </div>
            
            <!-- Modern SIP Client Test -->
            <div class="modern-sip-section" style="margin-top: 20px; padding: 15px; background: #e8f5e8; border-radius: 8px;">
                <h3>2024 Modern SIP Client</h3>
                <div style="margin-bottom: 10px;">
                    <button class="btn btn-success" onclick="initModernSIP()">
                        <i class="fas fa-play"></i> Init Modern SIP
                    </button>
                    <button class="btn btn-warning" onclick="testModernCall()" id="modernCallBtn" disabled>
                        <i class="fas fa-phone"></i> Test Call (Modern)
                    </button>
                    <button class="btn btn-danger" onclick="hangupModernCall()" id="modernHangupBtn" disabled>
                        <i class="fas fa-phone-slash"></i> Hangup
                    </button>
                </div>
                <div id="modernSipStatus" style="margin-top: 10px; font-weight: bold;"></div>
            </div>
            
            <!-- WebRTC Audio Test -->
            <div class="audio-test-section" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                <h3>Audio Test</h3>
                <button class="btn btn-info" onclick="testDirectWebRTC()">
                    <i class="fas fa-headset"></i> Test WebRTC Audio
                </button>
                <div id="audioTestStatus" style="margin-top: 10px; display: none;"></div>
            </div>

            <!-- Call History -->
            <div class="call-history">
                <h3>Qo'ng'iroqlar tarixi</h3>
                <div id="callHistory" class="history-list">
                    <p class="text-muted">Tarix bo'sh</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Audio elements -->
    <audio id="remoteAudio" autoplay></audio>
    <audio id="localAudio" autoplay muted></audio>

    <!-- Scripts -->
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/sip.min.js"></script>
    <script src="/js/working-sip-client.js"></script>
    <script src="/js/sip-simple-webrtc.js"></script>
    <script src="/js/sip-client-2024.js"></script>
    <script src="/js/webrtc-audio.js"></script>
    <script src="/js/sip-audio-bridge.js"></script>
    <script src="/js/sip-phone.js"></script>
    <script>
        // Initialize Socket.IO
        const socket = io();
        window.io = socket;
        // Load available SIP accounts
        let availableAccounts = [];
        let currentAccount = null;
        
        async function loadSIPAccounts() {
            try {
                const response = await fetch('/api/sip-accounts/active');
                availableAccounts = await response.json();
                
                const select = document.getElementById('sipAccountSelect');
                select.innerHTML = '<option value="">SIP account tanlang...</option>';
                
                availableAccounts.forEach(account => {
                    const option = document.createElement('option');
                    option.value = account.id;
                    option.textContent = `${account.extension} - ${account.name}`;
                    select.appendChild(option);
                });
                
                // Select first account by default if available
                if (availableAccounts.length > 0) {
                    select.value = availableAccounts[0].id;
                    changeSIPAccount();
                }
                
            } catch (error) {
                console.error('Error loading SIP accounts:', error);
            }
        }
        
        function changeSIPAccount() {
            const accountId = document.getElementById('sipAccountSelect').value;
            if (!accountId) {
                document.getElementById('extensionInfo').textContent = 'SIP account tanlanmagan';
                if (sipPhone) {
                    sipPhone.disconnect();
                }
                return;
            }
            
            const account = availableAccounts.find(a => a.id === accountId);
            if (!account) return;
            
            currentAccount = account;
            document.getElementById('extensionInfo').textContent = `Extension: ${account.extension}`;
            
            // Check if SIP.js is loaded
            if (typeof SIP === 'undefined') {
                console.error('SIP.js not loaded yet. Waiting...');
                setTimeout(() => changeSIPAccount(), 1000);
                return;
            }
            
            // Disconnect current SIP phone if connected
            if (sipPhone) {
                sipPhone.disconnect();
            }
            
            // Initialize with new account
            const sipConfig = {
                uri: `sip:${account.extension}@${account.server}`,
                server: account.server,
                extension: account.extension,
                password: account.password,
                wsServer: 'wss://172.27.64.10:8444/ws',
                displayName: account.name
            };
            
            // Initialize SIP phone with new config
            sipPhone = new SIPPhone(sipConfig);
            
            // Add debug logging
            console.log('Initializing SIP Phone with config:', sipConfig);
            
            // Request microphone permission first
            sipPhone.initializeWebRTCAudio().then(() => {
                console.log('Microphone permission check complete');
            }).catch(e => {
                console.error('Microphone permission error:', e);
            });
            
            sipPhone.initialize().then(result => {
                console.log('SIP initialization result:', result);
                console.log('Is registered:', sipPhone.isRegistered);
                console.log('Use backend:', sipPhone.useBackend);
            }).catch(error => {
                console.error('SIP initialization error:', error);
                alert('SIP ulanish xatosi: ' + error.message);
            });
            
            window.sipPhone = sipPhone;
        }
        
        // Wait for SIP.js to load before initializing
        function waitForSIPAndInit() {
            if (typeof SIP !== 'undefined' && typeof SIPPhone !== 'undefined') {
                console.log('SIP.js loaded, initializing...');
                loadSIPAccounts();
            } else {
                console.log('Waiting for SIP.js to load...');
                setTimeout(waitForSIPAndInit, 500);
            }
        }
        
        // Load accounts on page load
        document.addEventListener('DOMContentLoaded', () => {
            waitForSIPAndInit();
        });
        
        // Test call function
        async function makeTestCall() {
            try {
                const response = await fetch('/api/sip/test-call', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(result.message);
                    console.log('Test call details:', result.details);
                } else {
                    alert('Xatolik: ' + result.message);
                }
            } catch (error) {
                console.error('Test call error:', error);
                alert('Test qo\'ng\'iroq amalga oshmadi');
            }
        }
        
        // Working SIP Client
        let workingSIPClient = null;
        
        async function initWorkingSIP() {
            try {
                const statusDiv = document.getElementById('workingSipStatus');
                statusDiv.textContent = 'Initializing...';
                
                // Test microphone first
                workingSIPClient = new WorkingSIPClient();
                const micOK = await workingSIPClient.testMicrophone();
                
                if (!micOK) {
                    alert('Mikrofon ruxsati kerak!');
                }
                
                // Initialize
                await workingSIPClient.initialize();
                
                // Wait for registration
                await workingSIPClient.waitForRegistration();
                
                if (workingSIPClient.registered) {
                    document.getElementById('workingCallBtn').disabled = false;
                    statusDiv.textContent = 'SIP ro\'yxatdan o\'tdi ✅';
                    statusDiv.style.color = 'green';
                } else {
                    statusDiv.textContent = 'Ro\'yxatdan o\'tish kutilmoqda...';
                    statusDiv.style.color = 'orange';
                }
                
            } catch (error) {
                console.error('Working SIP init error:', error);
                document.getElementById('workingSipStatus').textContent = '❌ Xatolik: ' + error.message;
                document.getElementById('workingSipStatus').style.color = 'red';
            }
        }
        
        async function testWorkingCall() {
            if (!workingSIPClient || !workingSIPClient.registered) {
                alert('SIP ro\'yxatdan o\'tmagan!');
                return;
            }
            
            try {
                await workingSIPClient.makeCall('0990823112');
                document.getElementById('workingCallBtn').disabled = true;
                document.getElementById('workingHangupBtn').disabled = false;
            } catch (error) {
                console.error('Working call error:', error);
                alert('Qo\'ng\'iroq xatosi: ' + error.message);
            }
        }
        
        async function hangupWorkingCall() {
            if (!workingSIPClient) return;
            
            await workingSIPClient.hangup();
            document.getElementById('workingCallBtn').disabled = false;
            document.getElementById('workingHangupBtn').disabled = true;
        }
        
        // Simple WebRTC Test
        let simpleWebRTC = null;
        
        async function testSimpleWebRTC() {
            try {
                if (!simpleWebRTC) {
                    simpleWebRTC = new SimpleSIPWebRTC();
                    await simpleWebRTC.init();
                    
                    // Wait for registration
                    await new Promise(resolve => {
                        let checkInterval = setInterval(() => {
                            if (simpleWebRTC.registered) {
                                clearInterval(checkInterval);
                                resolve();
                            }
                        }, 500);
                        
                        // Timeout after 10 seconds
                        setTimeout(() => {
                            clearInterval(checkInterval);
                            resolve();
                        }, 10000);
                    });
                }
                
                if (simpleWebRTC.registered) {
                    await simpleWebRTC.makeCall('0990823112');
                } else {
                    alert('WebRTC ro\'yxatdan o\'tmadi. Qayta urinib ko\'ring.');
                }
                
            } catch (error) {
                console.error('Simple WebRTC error:', error);
                alert('Xatolik: ' + error.message);
            }
        }
        
        // Test microphone
        async function testMicrophone() {
            try {
                console.log('Testing microphone...');
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    audio: {
                        echoCancellation: true,
                        noiseSuppression: true,
                        autoGainControl: true
                    }
                });
                
                // Create audio context to analyze levels
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const analyser = audioContext.createAnalyser();
                const microphone = audioContext.createMediaStreamSource(stream);
                microphone.connect(analyser);
                
                // Create visual feedback
                const meter = document.createElement('div');
                meter.style.cssText = 'position: fixed; bottom: 20px; right: 20px; width: 200px; height: 20px; background: #ddd; border-radius: 10px; padding: 2px;';
                const bar = document.createElement('div');
                bar.style.cssText = 'height: 100%; width: 0%; background: #4CAF50; border-radius: 8px; transition: width 0.1s;';
                meter.appendChild(bar);
                document.body.appendChild(meter);
                
                // Monitor audio levels
                const dataArray = new Uint8Array(analyser.frequencyBinCount);
                let maxLevel = 0;
                
                const updateLevel = () => {
                    analyser.getByteFrequencyData(dataArray);
                    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;
                    const level = Math.min(100, average * 2);
                    bar.style.width = level + '%';
                    maxLevel = Math.max(maxLevel, level);
                };
                
                const interval = setInterval(updateLevel, 50);
                
                // Test for 5 seconds
                setTimeout(() => {
                    clearInterval(interval);
                    stream.getTracks().forEach(track => track.stop());
                    audioContext.close();
                    document.body.removeChild(meter);
                    
                    if (maxLevel > 10) {
                        alert('✅ Mikrofon ishlayapti! Maksimal daraja: ' + Math.round(maxLevel) + '%');
                    } else {
                        alert('⚠️ Mikrofon signali juda past yoki ishlamayapti.');
                    }
                }, 5000);
                
                alert('Gapiring! 5 sekund davomida mikrofon tekshiriladi...');
                
            } catch (error) {
                console.error('Microphone error:', error);
                alert('❌ Mikrofon xatosi: ' + error.message + '\n\nBrauzerda mikrofon ruxsatini bering!');
            }
        }
        
        // Modern SIP Client Functions
        let modernSipClient = null;
        
        async function initModernSIP() {
            try {
                const statusDiv = document.getElementById('modernSipStatus');
                statusDiv.textContent = 'Initializing Modern SIP Client...';
                
                modernSipClient = new ModernSIPClient({
                    uri: 'sip:4529@10.102.0.3',
                    server: '10.102.0.3',
                    username: '4529',
                    password: '4529',
                    wsServer: 'wss://172.27.64.10:8444/ws',
                    displayName: 'Modern SIP Test'
                });
                
                // Set up event handlers
                modernSipClient.onRegistered = () => {
                    statusDiv.textContent = '✅ Modern SIP Registered!';
                    statusDiv.style.color = 'green';
                    document.getElementById('modernCallBtn').disabled = false;
                };
                
                modernSipClient.onCallConnected = () => {
                    statusDiv.textContent = '📞 Call Connected - Audio Active!';
                    document.getElementById('modernHangupBtn').disabled = false;
                };
                
                modernSipClient.onCallEnded = () => {
                    statusDiv.textContent = '📴 Call Ended';
                    document.getElementById('modernHangupBtn').disabled = true;
                };
                
                // Initialize
                const success = await modernSipClient.initialize();
                
                if (!success) {
                    statusDiv.textContent = '❌ Modern SIP initialization failed';
                    statusDiv.style.color = 'red';
                }
                
            } catch (error) {
                console.error('Modern SIP init error:', error);
                document.getElementById('modernSipStatus').textContent = '❌ Error: ' + error.message;
                document.getElementById('modernSipStatus').style.color = 'red';
            }
        }
        
        async function testModernCall() {
            if (!modernSipClient || !modernSipClient.isRegistered) {
                alert('Modern SIP not registered!');
                return;
            }
            
            try {
                const result = await modernSipClient.makeCall('0990823112');
                
                if (result.success) {
                    document.getElementById('modernSipStatus').textContent = '📞 Modern call initiated';
                    document.getElementById('modernCallBtn').disabled = true;
                } else {
                    alert('Modern call failed');
                }
            } catch (error) {
                console.error('Modern call error:', error);
                alert('Modern call error: ' + error.message);
            }
        }
        
        async function hangupModernCall() {
            if (!modernSipClient) {
                return;
            }
            
            try {
                await modernSipClient.hangup();
                document.getElementById('modernCallBtn').disabled = false;
                document.getElementById('modernHangupBtn').disabled = true;
            } catch (error) {
                console.error('Modern hangup error:', error);
            }
        }
        
        // Test direct WebRTC connection
        async function testDirectWebRTC() {
            const statusDiv = document.getElementById('audioTestStatus');
            statusDiv.style.display = 'block';
            statusDiv.innerHTML = '<div class="alert alert-info">Testing WebRTC connection...</div>';
            
            try {
                // Create a simple WebRTC User Agent
                const testUA = new SIP.UA({
                    uri: 'sip:4529@10.102.0.3',
                    transportOptions: {
                        wsServers: ['wss://172.27.64.10:8444/ws'],
                        traceSip: true
                    },
                    authorizationUser: '4529',
                    password: '4529',
                    displayName: 'WebRTC Test',
                    register: true
                });
                
                let registered = false;
                
                testUA.on('registered', () => {
                    console.log('Test UA registered!');
                    registered = true;
                    statusDiv.innerHTML = '<div class="alert alert-success">✅ WebRTC registered! Making test call...</div>';
                    
                    // Make test call
                    const session = testUA.invite('sip:0990823112@10.102.0.3', {
                        sessionDescriptionHandlerOptions: {
                            constraints: {
                                audio: true,
                                video: false
                            }
                        }
                    });
                    
                    session.on('accepted', () => {
                        statusDiv.innerHTML = '<div class="alert alert-success">✅ Call connected! Audio should work.</div>';
                        
                        // Get remote audio
                        const pc = session.sessionDescriptionHandler.peerConnection;
                        const remoteStreams = pc.getRemoteStreams();
                        if (remoteStreams.length > 0) {
                            const remoteAudio = document.getElementById('remoteAudio');
                            remoteAudio.srcObject = remoteStreams[0];
                        }
                        
                        // Hangup after 10 seconds
                        setTimeout(() => {
                            session.bye();
                            testUA.stop();
                            statusDiv.innerHTML = '<div class="alert alert-info">Test completed.</div>';
                        }, 10000);
                    });
                    
                    session.on('failed', (response, cause) => {
                        statusDiv.innerHTML = '<div class="alert alert-danger">❌ Call failed: ' + cause + '</div>';
                        testUA.stop();
                    });
                });
                
                testUA.on('registrationFailed', (response, cause) => {
                    statusDiv.innerHTML = '<div class="alert alert-danger">❌ Registration failed: ' + cause + '</div>';
                });
                
                testUA.start();
                
                // Timeout after 15 seconds
                setTimeout(() => {
                    if (!registered) {
                        statusDiv.innerHTML = '<div class="alert alert-warning">⚠️ WebRTC connection timeout. Check Asterisk WebSocket configuration.</div>';
                        testUA.stop();
                    }
                }, 15000);
                
            } catch (error) {
                console.error('WebRTC test error:', error);
                statusDiv.innerHTML = '<div class="alert alert-danger">❌ WebRTC test error: ' + error.message + '</div>';
            }
        }
    </script>
    
    <!-- Fixed SIP Client -->
    <!-- Removed non-existent script reference -->
    <script>
        // Initialize Fixed SIP Client button
        function addFixedSIPButton() {
            const buttonsContainer = document.querySelector('.sip-container');
            if (buttonsContainer) {
                const fixedButton = document.createElement('button');
                fixedButton.className = 'sip-button';
                fixedButton.innerHTML = '🔧 Fixed SIP Client';
                fixedButton.onclick = async () => {
                    if (window.fixedSIPClient) {
                        const result = await window.fixedSIPClient.initialize();
                        if (result) {
                            alert('✅ Fixed SIP Client initialized!');
                        }
                    }
                };
                buttonsContainer.appendChild(fixedButton);
            }
        }
        
        // Add button when page loads
        document.addEventListener('DOMContentLoaded', addFixedSIPButton);
    </script>
    <script src="/js/offline-icons.js"></script>
    <script src="/js/material-icons-fix.js"></script>
    <script src="/js/language-manager.js"></script>
</body>
</html>