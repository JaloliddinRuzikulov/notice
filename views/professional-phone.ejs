<!DOCTYPE html>
<html lang="uz">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional VoIP Phone - Qashqadaryo IIB</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/material-icons-local.css">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #1a1a1a;
            color: #fff;
            margin: 0;
            padding: 0;
            height: 100vh;
            overflow: hidden;
        }
        
        .phone-container {
            max-width: 400px;
            margin: 0 auto;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: #2a2a2a;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }
        
        
        .status-bar {
            display: flex;
            justify-content: space-between;
            padding: 10px 20px;
            background: #333;
            font-size: 14px;
        }
        
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-indicator.online {
            background: #4caf50;
            animation: pulse 2s infinite;
        }
        
        .status-indicator.offline {
            background: #f44336;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(76, 175, 80, 0); }
            100% { box-shadow: 0 0 0 0 rgba(76, 175, 80, 0); }
        }
        
        /* Display */
        .call-display {
            background: #1a1a1a;
            padding: 30px 20px;
            text-align: center;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .number-display {
            font-size: 32px;
            font-weight: 300;
            margin-bottom: 10px;
            min-height: 40px;
            letter-spacing: 2px;
        }
        
        .call-timer {
            font-size: 18px;
            color: #888;
            margin-bottom: 20px;
        }
        
        .call-quality {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            font-size: 12px;
            color: #888;
        }
        
        .quality-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .quality-bars {
            display: flex;
            gap: 2px;
        }
        
        .quality-bar {
            width: 3px;
            height: 12px;
            background: #444;
            transition: all 0.3s;
        }
        
        .quality-bar.active {
            background: #4caf50;
        }
        
        /* Dialpad */
        .dialpad {
            background: #2a2a2a;
            padding: 20px;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
        }
        
        .dialpad-btn {
            background: #3a3a3a;
            border: none;
            border-radius: 50%;
            width: 70px;
            height: 70px;
            font-size: 24px;
            color: #fff;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
            margin: 0 auto;
        }
        
        .dialpad-btn:hover {
            background: #4a4a4a;
            transform: scale(1.05);
        }
        
        .dialpad-btn:active {
            background: #0066cc;
            transform: scale(0.95);
        }
        
        .dialpad-btn sub {
            position: absolute;
            bottom: 15px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 10px;
            color: #888;
        }
        
        /* Action buttons */
        .action-buttons {
            padding: 20px;
            display: flex;
            justify-content: space-around;
            background: #333;
        }
        
        .action-btn {
            background: none;
            border: none;
            color: #fff;
            font-size: 12px;
            cursor: pointer;
            padding: 10px;
            border-radius: 8px;
            transition: all 0.2s;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }
        
        .action-btn:hover {
            background: rgba(255,255,255,0.1);
        }
        
        .action-btn.active {
            background: rgba(0,102,204,0.3);
            color: #0099ff;
        }
        
        .action-btn svg {
            width: 24px;
            height: 24px;
        }
        
        /* Call button */
        .call-actions {
            padding: 20px;
            display: flex;
            justify-content: center;
            gap: 20px;
            background: #2a2a2a;
        }
        
        .call-btn {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .call-btn.answer {
            background: linear-gradient(135deg, #4caf50, #45a049);
        }
        
        .call-btn.hangup {
            background: linear-gradient(135deg, #f44336, #da190b);
        }
        
        .call-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 20px rgba(0,0,0,0.3);
        }
        
        .call-btn svg {
            width: 32px;
            height: 32px;
            fill: white;
        }
        
        /* Incoming call modal */
        .incoming-call {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.95);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        
        .incoming-call.show {
            display: flex;
        }
        
        .incoming-content {
            text-align: center;
            animation: slideUp 0.3s ease-out;
        }
        
        @keyframes slideUp {
            from { transform: translateY(100px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        .caller-info {
            font-size: 32px;
            margin-bottom: 20px;
        }
        
        .caller-number {
            font-size: 18px;
            color: #888;
            margin-bottom: 40px;
        }
        
        /* Settings panel */
        .settings-panel {
            position: fixed;
            top: 0;
            right: -300px;
            width: 300px;
            height: 100vh;
            background: #1a1a1a;
            box-shadow: -2px 0 10px rgba(0,0,0,0.5);
            transition: right 0.3s;
            overflow-y: auto;
            z-index: 999;
        }
        
        .settings-panel.show {
            right: 0;
        }
        
        .settings-header {
            padding: 20px;
            background: #333;
            display: flex;
            justify-content: between;
            align-items: center;
        }
        
        .settings-content {
            padding: 20px;
        }
        
        .setting-item {
            margin-bottom: 20px;
        }
        
        .setting-item label {
            display: block;
            margin-bottom: 5px;
            font-size: 14px;
            color: #888;
        }
        
        .setting-item select,
        .setting-item input {
            width: 100%;
            padding: 8px;
            background: #333;
            border: 1px solid #444;
            color: #fff;
            border-radius: 4px;
        }
        
        /* Hidden elements */
        audio {
            display: none;
        }
    </style>
</head>
<body>
    <div class="phone-container">
        
        <!-- Status Bar -->
        <div class="status-bar">
            <div class="status-left">
                <span class="status-indicator offline" id="statusIndicator"></span>
                <span id="statusText">Connecting...</span>
            </div>
            <div class="status-right">
                <span id="extension">Ext: <%= user.username %></span>
            </div>
        </div>
        
        <!-- Call Display -->
        <div class="call-display">
            <div class="number-display" id="numberDisplay"></div>
            <div class="call-timer" id="callTimer"></div>
            <div class="call-quality" id="callQuality" style="display: none;">
                <div class="quality-item">
                    <span>Quality:</span>
                    <div class="quality-bars">
                        <div class="quality-bar"></div>
                        <div class="quality-bar"></div>
                        <div class="quality-bar"></div>
                        <div class="quality-bar"></div>
                        <div class="quality-bar"></div>
                    </div>
                </div>
                <div class="quality-item">
                    <span id="codecInfo">-</span>
                </div>
                <div class="quality-item">
                    <span id="latencyInfo">0ms</span>
                </div>
            </div>
        </div>
        
        <!-- Dialpad -->
        <div class="dialpad">
            <button class="dialpad-btn" data-digit="1">1<sub>ABC</sub></button>
            <button class="dialpad-btn" data-digit="2">2<sub>DEF</sub></button>
            <button class="dialpad-btn" data-digit="3">3<sub>GHI</sub></button>
            <button class="dialpad-btn" data-digit="4">4<sub>JKL</sub></button>
            <button class="dialpad-btn" data-digit="5">5<sub>MNO</sub></button>
            <button class="dialpad-btn" data-digit="6">6<sub>PQR</sub></button>
            <button class="dialpad-btn" data-digit="7">7<sub>STU</sub></button>
            <button class="dialpad-btn" data-digit="8">8<sub>VWX</sub></button>
            <button class="dialpad-btn" data-digit="9">9<sub>YZ</sub></button>
            <button class="dialpad-btn" data-digit="*">*</button>
            <button class="dialpad-btn" data-digit="0">0<sub>+</sub></button>
            <button class="dialpad-btn" data-digit="#">#</button>
        </div>
        
        <!-- Action Buttons -->
        <div class="action-buttons">
            <button class="action-btn" id="muteBtn">
                <svg viewBox="0 0 24 24">
                    <path d="M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z" fill="currentColor"/>
                    <path d="M17.3 11c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z" fill="currentColor"/>
                </svg>
                <span>Mute</span>
            </button>
            <button class="action-btn" id="holdBtn">
                <svg viewBox="0 0 24 24">
                    <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z" fill="currentColor"/>
                </svg>
                <span>Hold</span>
            </button>
            <button class="action-btn" id="transferBtn">
                <svg viewBox="0 0 24 24">
                    <path d="M16 1l-4 4h3v7h2V5h3l-4-4zM8 23l4-4H9v-7H7v7H4l4 4z" fill="currentColor"/>
                </svg>
                <span>Transfer</span>
            </button>
            <button class="action-btn" id="settingsBtn">
                <svg viewBox="0 0 24 24">
                    <path d="M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z" fill="currentColor"/>
                </svg>
                <span>Settings</span>
            </button>
        </div>
        
        <!-- Call Actions -->
        <div class="call-actions">
            <button class="call-btn answer" id="callBtn" style="display: block;">
                <svg viewBox="0 0 24 24">
                    <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                </svg>
            </button>
            <button class="call-btn hangup" id="hangupBtn" style="display: none;">
                <svg viewBox="0 0 24 24">
                    <path d="M24 10.2c0-1.1-.5-2.1-1.4-2.6l-3.5-2c-.3-.2-.6-.3-1-.3s-.7.1-1 .3l-2.5 1.4c-.3.2-.6.6-.6 1v1.7c-1.9-.5-3.9-.5-5.8 0V8c0-.4-.2-.8-.6-1L5.1 5.6c-.3-.2-.6-.3-1-.3s-.7.1-1 .3l-3.5 2C.2 8.1-.3 9.1-.3 10.2c0 .5.2 1 .5 1.4l6.6 6.6c.2.2.5.3.7.3s.5-.1.7-.3l2.5-2.5c.2-.2.3-.5.3-.7s-.1-.5-.3-.7L9 12.5V12c1.9-.5 3.9-.5 5.8 0v.5l-1.7 1.7c-.2.2-.3.4-.3.7 0 .3.1.5.3.7l2.5 2.5c.2.2.4.3.7.3.3 0 .5-.1.7-.3l6.6-6.6c.3-.4.4-.9.4-1.3z"/>
                </svg>
            </button>
        </div>
    </div>
    
    <!-- Incoming Call Modal -->
    <div class="incoming-call" id="incomingCall">
        <div class="incoming-content">
            <div class="caller-info" id="callerName">Unknown</div>
            <div class="caller-number" id="callerNumber">+998901234567</div>
            <div class="call-actions">
                <button class="call-btn answer" id="answerBtn">
                    <svg viewBox="0 0 24 24">
                        <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                    </svg>
                </button>
                <button class="call-btn hangup" id="rejectBtn">
                    <svg viewBox="0 0 24 24">
                        <path d="M24 10.2c0-1.1-.5-2.1-1.4-2.6l-3.5-2c-.3-.2-.6-.3-1-.3s-.7.1-1 .3l-2.5 1.4c-.3.2-.6.6-.6 1v1.7c-1.9-.5-3.9-.5-5.8 0V8c0-.4-.2-.8-.6-1L5.1 5.6c-.3-.2-.6-.3-1-.3s-.7.1-1 .3l-3.5 2C.2 8.1-.3 9.1-.3 10.2c0 .5.2 1 .5 1.4l6.6 6.6c.2.2.5.3.7.3s.5-.1.7-.3l2.5-2.5c.2-.2.3-.5.3-.7s-.1-.5-.3-.7L9 12.5V12c1.9-.5 3.9-.5 5.8 0v.5l-1.7 1.7c-.2.2-.3.4-.3.7 0 .3.1.5.3.7l2.5 2.5c.2.2.4.3.7.3.3 0 .5-.1.7-.3l6.6-6.6c.3-.4.4-.9.4-1.3z"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>
    
    <!-- Settings Panel -->
    <div class="settings-panel" id="settingsPanel">
        <div class="settings-header">
            <h3>Settings</h3>
            <button id="closeSettings" style="background: none; border: none; color: #fff; font-size: 24px; cursor: pointer;">&times;</button>
        </div>
        <div class="settings-content">
            <div class="setting-item">
                <label>Audio Codec Priority</label>
                <select id="codecPriority">
                    <option value="opus">Opus (Best quality)</option>
                    <option value="g722">G.722 (Wideband)</option>
                    <option value="g711">G.711 (Standard)</option>
                    <option value="g729">G.729 (Low bandwidth)</option>
                </select>
            </div>
            <div class="setting-item">
                <label>Echo Cancellation</label>
                <select id="echoCancellation">
                    <option value="true">Enabled</option>
                    <option value="false">Disabled</option>
                </select>
            </div>
            <div class="setting-item">
                <label>Noise Suppression</label>
                <select id="noiseSuppression">
                    <option value="true">Enabled</option>
                    <option value="false">Disabled</option>
                </select>
            </div>
            <div class="setting-item">
                <label>Auto Gain Control</label>
                <select id="autoGainControl">
                    <option value="true">Enabled</option>
                    <option value="false">Disabled</option>
                </select>
            </div>
            <div class="setting-item">
                <label>DTMF Type</label>
                <select id="dtmfType">
                    <option value="info">SIP INFO</option>
                    <option value="rfc2833">RFC 2833</option>
                    <option value="inband">In-band</option>
                </select>
            </div>
        </div>
    </div>
    
    <!-- Audio Elements -->
    <audio id="localAudio"></audio>
    <audio id="remoteAudio"></audio>
    <audio id="ringtone" src="/audio/ringtone.mp3" loop></audio>
    
    <!-- SIP.js -->
    <script src="/js/sip.min.js"></script>
    
    <!-- Professional SIP Client -->
    <script src="/js/professional-sip-client.js"></script>
    
    <!-- Main Script -->
    <script>
        // Configuration
        const sipConfig = {
            server: '<%= process.env.SIP_SERVER || "10.102.0.3" %>',
            extension: '<%= process.env.SIP_EXTENSION_1 || "4529" %>',
            password: '<%= process.env.SIP_PASSWORD || "4529" %>',
            displayName: 'Professional Phone',
            debug: true,
            stunServer: 'stun.l.google.com:19302'
        };
        
        // Initialize client
        let sipClient = null;
        let currentNumber = '';
        let callTimer = null;
        let callStartTime = null;
        
        // DOM Elements
        const statusIndicator = document.getElementById('statusIndicator');
        const statusText = document.getElementById('statusText');
        const numberDisplay = document.getElementById('numberDisplay');
        const callTimerEl = document.getElementById('callTimer');
        const callQuality = document.getElementById('callQuality');
        const callBtn = document.getElementById('callBtn');
        const hangupBtn = document.getElementById('hangupBtn');
        const incomingCallModal = document.getElementById('incomingCall');
        const settingsPanel = document.getElementById('settingsPanel');
        
        // Initialize SIP Client
        async function initializeSIP() {
            try {
                sipClient = new ProfessionalSIPClient(sipConfig);
                
                // Set event handlers
                sipClient.eventHandlers.onRegistered = () => {
                    statusIndicator.classList.remove('offline');
                    statusIndicator.classList.add('online');
                    statusText.textContent = 'Connected';
                };
                
                sipClient.eventHandlers.onUnregistered = () => {
                    statusIndicator.classList.remove('online');
                    statusIndicator.classList.add('offline');
                    statusText.textContent = 'Disconnected';
                };
                
                sipClient.eventHandlers.onCallReceived = (callInfo) => {
                    showIncomingCall(callInfo);
                };
                
                sipClient.eventHandlers.onCallConnected = (callInfo) => {
                    startCallTimer();
                    callQuality.style.display = 'flex';
                    callBtn.style.display = 'none';
                    hangupBtn.style.display = 'block';
                };
                
                sipClient.eventHandlers.onCallEnded = (callInfo) => {
                    stopCallTimer();
                    callQuality.style.display = 'none';
                    callBtn.style.display = 'block';
                    hangupBtn.style.display = 'none';
                    numberDisplay.textContent = '';
                    currentNumber = '';
                };
                
                sipClient.eventHandlers.onQualityReport = (quality) => {
                    updateQualityDisplay(quality);
                };
                
                sipClient.eventHandlers.onDTMFReceived = (digit) => {
                    console.log('DTMF received:', digit);
                };
                
                // Initialize
                await sipClient.initialize();
                
            } catch (error) {
                console.error('Failed to initialize SIP client:', error);
                statusText.textContent = 'Error: ' + error.message;
            }
        }
        
        // Dialpad handling
        document.querySelectorAll('.dialpad-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const digit = btn.dataset.digit;
                
                if (sipClient && sipClient.currentSession) {
                    // Send DTMF
                    sipClient.sendDTMF(digit);
                } else {
                    // Add to number
                    currentNumber += digit;
                    numberDisplay.textContent = formatPhoneNumber(currentNumber);
                }
                
                // Play tone
                playDTMFTone(digit);
            });
        });
        
        // Call button
        callBtn.addEventListener('click', () => {
            if (currentNumber) {
                makeCall(currentNumber);
            }
        });
        
        // Hangup button
        hangupBtn.addEventListener('click', () => {
            if (sipClient) {
                sipClient.hangup();
            }
        });
        
        // Action buttons
        document.getElementById('muteBtn').addEventListener('click', function() {
            if (sipClient && sipClient.currentSession) {
                const isMuted = sipClient.toggleMute();
                this.classList.toggle('active', isMuted);
                this.querySelector('span').textContent = isMuted ? 'Unmute' : 'Mute';
            }
        });
        
        document.getElementById('holdBtn').addEventListener('click', function() {
            if (sipClient && sipClient.currentSession) {
                sipClient.toggleHold();
                this.classList.toggle('active');
            }
        });
        
        document.getElementById('transferBtn').addEventListener('click', () => {
            if (sipClient && sipClient.currentSession) {
                const target = prompt('Transfer to number:');
                if (target) {
                    sipClient.transferCall(target, { blind: true });
                }
            }
        });
        
        // Settings
        document.getElementById('settingsBtn').addEventListener('click', () => {
            settingsPanel.classList.add('show');
        });
        
        document.getElementById('closeSettings').addEventListener('click', () => {
            settingsPanel.classList.remove('show');
        });
        
        // Make call
        async function makeCall(number) {
            try {
                numberDisplay.textContent = formatPhoneNumber(number);
                await sipClient.makeCall(number);
            } catch (error) {
                console.error('Call failed:', error);
                alert('Call failed: ' + error.message);
            }
        }
        
        // Show incoming call
        function showIncomingCall(callInfo) {
            document.getElementById('callerName').textContent = callInfo.from || 'Unknown';
            document.getElementById('callerNumber').textContent = callInfo.number || '';
            incomingCallModal.classList.add('show');
            
            // Answer button
            document.getElementById('answerBtn').onclick = () => {
                sipClient.answerCall(callInfo.id);
                incomingCallModal.classList.remove('show');
            };
            
            // Reject button
            document.getElementById('rejectBtn').onclick = () => {
                sipClient.rejectCall(callInfo.id);
                incomingCallModal.classList.remove('show');
            };
        }
        
        // Call timer
        function startCallTimer() {
            callStartTime = Date.now();
            callTimer = setInterval(() => {
                const duration = Math.floor((Date.now() - callStartTime) / 1000);
                const minutes = Math.floor(duration / 60);
                const seconds = duration % 60;
                callTimerEl.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            }, 1000);
        }
        
        function stopCallTimer() {
            if (callTimer) {
                clearInterval(callTimer);
                callTimer = null;
                callTimerEl.textContent = '';
            }
        }
        
        // Update quality display
        function updateQualityDisplay(quality) {
            // Update quality bars
            const bars = document.querySelectorAll('.quality-bar');
            bars.forEach((bar, index) => {
                bar.classList.toggle('active', index < quality.score);
            });
            
            // Update codec info
            document.getElementById('codecInfo').textContent = quality.codec || '-';
            
            // Update latency
            document.getElementById('latencyInfo').textContent = `${Math.round(quality.roundTripTime)}ms`;
        }
        
        // Format phone number
        function formatPhoneNumber(number) {
            if (number.length <= 3) return number;
            if (number.length <= 6) return `${number.slice(0, 3)}-${number.slice(3)}`;
            if (number.length <= 10) return `${number.slice(0, 3)}-${number.slice(3, 6)}-${number.slice(6)}`;
            return number;
        }
        
        // Play DTMF tone
        function playDTMFTone(digit) {
            // Implementation for DTMF tone generation
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const frequencies = {
                '1': [697, 1209], '2': [697, 1336], '3': [697, 1477],
                '4': [770, 1209], '5': [770, 1336], '6': [770, 1477],
                '7': [852, 1209], '8': [852, 1336], '9': [852, 1477],
                '*': [941, 1209], '0': [941, 1336], '#': [941, 1477]
            };
            
            if (frequencies[digit]) {
                const [freq1, freq2] = frequencies[digit];
                const oscillator1 = audioContext.createOscillator();
                const oscillator2 = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator1.frequency.value = freq1;
                oscillator2.frequency.value = freq2;
                gainNode.gain.value = 0.1;
                
                oscillator1.connect(gainNode);
                oscillator2.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator1.start();
                oscillator2.start();
                
                setTimeout(() => {
                    oscillator1.stop();
                    oscillator2.stop();
                }, 200);
            }
        }
        
        // Keyboard support
        document.addEventListener('keydown', (e) => {
            if (e.key >= '0' && e.key <= '9' || e.key === '*' || e.key === '#') {
                const btn = document.querySelector(`.dialpad-btn[data-digit="${e.key}"]`);
                if (btn) btn.click();
            } else if (e.key === 'Enter' && currentNumber && !sipClient.currentSession) {
                callBtn.click();
            } else if (e.key === 'Escape' && sipClient && sipClient.currentSession) {
                hangupBtn.click();
            } else if (e.key === 'Backspace' && !sipClient.currentSession) {
                currentNumber = currentNumber.slice(0, -1);
                numberDisplay.textContent = formatPhoneNumber(currentNumber);
            }
        });
        
        // Initialize on load
        window.addEventListener('load', () => {
            initializeSIP();
        });
        
        // Cleanup on unload
        window.addEventListener('beforeunload', () => {
            if (sipClient) {
                sipClient.destroy();
            }
        });
    </script>
    <script src="/js/offline-icons.js"></script>
    <script src="/js/material-icons-fix.js"></script>
    <script src="/js/language-manager.js"></script>
</body>
</html>